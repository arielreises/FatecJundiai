4+5
library(glue)
disciplina <- "Projeto Integrador"
aluno <- "Ariel Ladislau Reises"
mensagem <- glue("Disciplina: {disciplina}\nAluno: {aluno}")
print(mensagem)
# Operadores Aritméticos
7+2        #soma
7-2        #subtração
7*2        #multiplicação
7/2        #divisão
7%/%2      #parte inteira da divisão
7%%2       #resto da divisão
7^2        #potenciação
9^(1/2)    #radiciação
sqrt(9)    #raiz quadrada
# Operadores lógicos
3==3        #igualdade
3>=4        #desigualdade
3>4         #desigualdade
3<=4        #desigualdade
3<4         #desigualdade
3!=3        #diferente
# Atribuir valor a uma variável
x<-4        #atribui valor 4 a variável x
x           #apresenta no console o valor
# Definindo os vetores
x <- c(2, 2, 5, 7, 8, 9, 20)
y <- c(3, 3, 4, 5, 5, 7, 8, 9, 9, 14)
z <- c(2.34, 4.56, 5.35, 6.45)
# Calculando a média de x
soma_x <- sum(x)      # Soma dos valores de x
quantidade_x <- length(x)  # Número de elementos de x
mediax <- soma_x / quantidade_x  # Média de x
# Calculando a média de y
soma_y <- sum(y)
quantidade_y <- length(y)
mediay <- soma_y / quantidade_y
# Calculando a média de z
soma_z <- sum(z)
quantidade_z <- length(z)
mediaz <- soma_z / quantidade_z
# Exibindo os resultados
print(paste("Média de x:", mediax))
print(paste("Média de y:", mediay))
print(paste("Média de z:", mediaz))
# Calculando a média de x
soma_x <- 2 + 2 + 5 + 7 + 8 + 9 + 20   # Soma dos valores
quantidade_x <- 7  # Número de elementos (sem vetor, você conta manualmente)
mediax <- soma_x / quantidade_x  # Média de x
# Calculando a média de y
soma_y <- 3 + 3 + 4 + 5 + 5 + 7 + 8 + 9 + 9 + 14
quantidade_y <- 10
mediay <- soma_y / quantidade_y
# Calculando a média de z
soma_z <- 2.34 + 4.56 + 5.35 + 6.45
quantidade_z <- 4
mediaz <- soma_z / quantidade_z
# Exibindo os resultados
print(paste("Média de x:", mediax))
print(paste("Média de y:", mediay))
print(paste("Média de z:", mediaz))
# Calculando a média de x
soma_x <- 2 + 2 + 5 + 7 + 8 + 9 + 20
quantidade_x <- 7
mediax <- soma_x / quantidade_x
# Calculando a média de y
soma_y <- 3 + 3 + 4 + 5 + 5 + 7 + 8 + 9 + 9 + 14
quantidade_y <- 10
mediay <- soma_y / quantidade_y
# Calculando a média de z
soma_z <- 2.34 + 4.56 + 5.35 + 6.45
quantidade_z <- 4
mediaz <- soma_z / quantidade_z
# Exibindo os resultados
print(paste("Média de x:", mediax))
print(paste("Média de y:", mediay))
print(paste("Média de z:", mediaz))
#funcao
calcula<-function(x){
y<-x^2
return(y)
}
x<-c(1,2,3)
x
calcula(x)
#condicional (&& = e) (|| = ou)
x<-3
if (x>2&&x<4){
z<-print("ok")
} else {
z<-print("nao")
}
#trabalho vetorial
x <- c(2/3,8.7,9.2,5.66666) #carrega o vetor em x
x 		#apresenta o vetor
sum(x) 	#soma o vetor
length(x) 	#tamanho do vetor
sort (x) 	#ordena em ordem crescente
x < 8.7 	#retorna verdadeiro ou falso
x [3] 		#retorna o valor pos 3
x [3:4] 	#retorna o valor pos 3 e 4
x[c(1,4)] 	#retorna o valor 1 e o valor 4
NOTA.CORTE <-8.7   #variável
x[x <= 8.7] 	#retorna valores da condição
which(x <= NOTA.CORTE)     #localiza a condição
y <- which(x <= NOTA.CORTE) #armazena a condição
Y			 #mosttra o vetor resultante
# Calculando a média de x
soma_x <- 2 + 2 + 5 + 7 + 8 + 9 + 20
quantidade_x <- 7
mediax <- soma_x / quantidade_x
# Calculando a média de y
soma_y <- 3 + 3 + 4 + 5 + 5 + 7 + 8 + 9 + 9 + 14
quantidade_y <- 10
mediay <- soma_y / quantidade_y
# Calculando a média de z
soma_z <- 2.34 + 4.56 + 5.35 + 6.45
quantidade_z <- 4
mediaz <- soma_z / quantidade_z
# Exibindo os resultados
print(paste("Média de x:", mediax))
print(paste("Média de y:", mediay))
print(paste("Média de z:", mediaz))
#funcao
calcula<-function(x){
y<-x^2
return(y)
}
x<-c(1,2,3)
x
calcula(x)
#condicional (&& = e) (|| = ou)
x<-3
if (x>2&&x<4){
z<-print("ok")
} else {
z<-print("nao")
}
#trabalho vetorial
x <- c(2/3,8.7,9.2,5.66666) #carrega o vetor em x
x 		#apresenta o vetor
sum(x) 	#soma o vetor
length(x) 	#tamanho do vetor
sort (x) 	#ordena em ordem crescente
x < 8.7 	#retorna verdadeiro ou falso
x [3] 		#retorna o valor pos 3
x [3:4] 	#retorna o valor pos 3 e 4
x[c(1,4)] 	#retorna o valor 1 e o valor 4
NOTA.CORTE <-8.7   #variável
x[x <= 8.7] 	#retorna valores da condição
which(x <= NOTA.CORTE)     #localiza a condição
y <- which(x <= NOTA.CORTE) #armazena a condição
y			 #mosttra o vetor resultante
x[y] 			 #mostra os valores da cond y
x[which(x <= NOTA.CORTE)]
#funcao
calcula<-function(x){
y<-x^2
return(y)
}
x<-4
x
calcula(x)
# Função para calcular a média
calcular_media <- function(vetor) {
return(mean(vetor))
}
# Função para calcular a mediana
calcular_mediana <- function(vetor) {
return(median(vetor))
}
# Dados
x <- c(2, 2, 5, 7, 8, 9, 20)
y <- c(3, 3, 4, 5, 5, 7, 8, 9, 9, 14)
z <- c(2.34, 4.56, 5.35, 6.45)
# Calculando a média e a mediana para cada vetor
media_x <- calcular_media(x)
mediana_x <- calcular_mediana(x)
media_y <- calcular_media(y)
mediana_y <- calcular_mediana(y)
media_z <- calcular_media(z)
mediana_z <- calcular_mediana(z)
# Exibindo os resultados
cat("Média e Mediana de x: \n")
cat("Média: ", media_x, "\n")
cat("Mediana: ", mediana_x, "\n")
cat("\nMédia e Mediana de y: \n")
cat("Média: ", media_y, "\n")
cat("Mediana: ", mediana_y, "\n")
cat("\nMédia e Mediana de z: \n")
cat("Média: ", media_z, "\n")
cat("Mediana: ", mediana_z, "\n")
# --------------------------------------------------
# Aluno: Ariel Ladislau Reises
# Disciplina: Projeto Integrador II
# Aula 02
# Conteúdo:
# Operadores Lógicos e Aritiméticos, Funções e Vetores
# --------------------------------------------------
# Primeiro, a funçãozinha pra calcular a média
calcular_media <- function(vetor) {
soma <- 0
for (i in vetor) {
soma <- soma + i
}
media <- soma / length(vetor)
return(media)
}
# Depois, a função pra calcular a mediana
calcular_mediana <- function(vetor) {
vetor <- sort(vetor)  # Usando o sort pra organizar os dados em ordem crescente
n <- length(vetor) # Usando o lenght
# Se o número de elementos for ímpar, a mediana é o valor do meio
if (n %% 2 != 0) {
mediana <- vetor[(n + 1) / 2]
} else {
# E quando for par, a mediana é a média dos dois valores do meio
mediana <- (vetor[n / 2] + vetor[(n / 2) + 1]) / 2
}
return(mediana)
}
# Dados do slide
x <- c(2, 2, 5, 7, 8, 9, 20)
y <- c(3, 3, 4, 5, 5, 7, 8, 9, 9, 14)
z <- c(2.34, 4.56, 5.35, 6.45)
# Criando as variáveis pra guardar os dados da média e da mediana para cada vetor, e puxando a função
media_x <- calcular_media(x)
mediana_x <- calcular_mediana(x)
media_y <- calcular_media(y)
mediana_y <- calcular_mediana(y)
media_z <- calcular_media(z)
mediana_z <- calcular_mediana(z)
# Mostando os resultados (usei o cat ao invés do print pra deixar o código mais limpo e organizado)
cat("Média e Mediana de x: \n")
cat("Média: ", media_x, "\n")
cat("Mediana: ", mediana_x, "\n")
cat("\nMédia e Mediana de y: \n")
cat("Média: ", media_y, "\n")
cat("Mediana: ", mediana_y, "\n")
cat("\nMédia e Mediana de z: \n")
cat("Média: ", media_z, "\n")
cat("Mediana: ", mediana_z, "\n")
# --------------------------------------------------
# Aluno: Ariel Ladislau Reises
# Disciplina: Projeto Integrador II
# Aula 02
# Conteúdo:
# Operadores Lógicos e Aritiméticos, Funções e Vetores
# --------------------------------------------------
# Primeiro, a funçãozinha pra calcular a média
calcular_media <- function(vetor) {
soma <- 0
for (i in vetor) {
soma <- soma + i
}
media <- soma / length(vetor)
return(media)
}
# Depois, a função pra calcular a mediana
calcular_mediana <- function(vetor) {
vetor <- sort(vetor)  # Usando o sort pra organizar os dados em ordem crescente
n <- length(vetor) # Usando o lenght
# Se o número de elementos for ímpar, a mediana é o valor do meio
if (n %% 2 != 0) {
mediana <- vetor[(n + 1) / 2]
} else {
# E quando for par, a mediana é a média dos dois valores do meio
mediana <- (vetor[n / 2] + vetor[(n / 2) + 1]) / 2
}
return(mediana)
}
# Dados do slide
x <- c(2, 2, 5, 7, 8, 9, 20)
y <- c(3, 3, 4, 5, 5, 7, 8, 9, 9, 14)
z <- c(2.34, 4.56, 5.35, 6.45)
# Criando as variáveis pra guardar os dados da média e da mediana para cada vetor, e puxando a função
media_x <- calcular_media(x)
mediana_x <- calcular_mediana(x)
media_y <- calcular_media(y)
mediana_y <- calcular_mediana(y)
media_z <- calcular_media(z)
mediana_z <- calcular_mediana(z)
# Mostando os resultados (usei o cat ao invés do print pra deixar o código mais limpo e organizado)
print("Projeto Integrador II - Aula 02")
print("Aluno: Ariel Ladislau Reises")
cat("Média e Mediana de x: \n")
cat("Média: ", media_x, "\n")
cat("Mediana: ", mediana_x, "\n")
cat("\nMédia e Mediana de y: \n")
cat("Média: ", media_y, "\n")
cat("Mediana: ", mediana_y, "\n")
cat("\nMédia e Mediana de z: \n")
cat("Média: ", media_z, "\n")
cat("Mediana: ", mediana_z, "\n")
# Tabela 1
tabela1 <- data.frame(
Xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
# Tabela 2
tabela2 <- data.frame(
Xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# Tabela 3
tabela3 <- data.frame(
Xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Função pra calcular a média
calcular_media <- function(tabela) {
soma_produtos <- sum(tabela$Xi * tabela$fi)
soma_frequencias <- sum(tabela$fi)
media <- soma_produtos / soma_frequencias
return(media)
}
# Função pra calcular a moda
calcular_moda <- function(tabela) {
moda <- tabela$Xi[which.max(tabela$fi)]
return(moda)
}
# Função pra calcular a mediana
calcular_mediana <- function(tabela) {
valores_expandidos <- rep(tabela$Xi, tabela$fi)
valores_ordenados <- sort(valores_expandidos)
n <- length(valores_ordenados)
if (n %% 2 == 0) {
mediana <- (valores_ordenados[n/2] + valores_ordenados[n/2 + 1]) / 2
} else {
mediana <- valores_ordenados[(n + 1) / 2]
}
return(mediana)
}
# Calculando a Tabela 1
media_tabela1 <- calcular_media(tabela1)
moda_tabela1 <- calcular_moda(tabela1)
mediana_tabela1 <- calcular_mediana(tabela1)
# Calculando a Tabela 2
media_tabela2 <- calcular_media(tabela2)
moda_tabela2 <- calcular_moda(tabela2)
mediana_tabela2 <- calcular_mediana(tabela2)
# Calculando a Tabela 3
media_tabela3 <- calcular_media(tabela3)
moda_tabela3 <- calcular_moda(tabela3)
mediana_tabela3 <- calcular_mediana(tabela3)
# Resultados
cat("Resultados Tabela 1:\n")
cat("Média:", media_tabela1, "\n")
cat("Moda:", moda_tabela1, "\n")
cat("Mediana:", mediana_tabela1, "\n\n")
cat("Resultados Tabela 2:\n")
cat("Média:", media_tabela2, "\n")
cat("Moda:", moda_tabela2, "\n")
cat("Mediana:", mediana_tabela2, "\n\n")
cat("Resultados Tabela 3:\n")
cat("Média:", media_tabela3, "\n")
cat("Moda:", moda_tabela3, "\n")
cat("Mediana:", mediana_tabela3, "\n")
cat("Mediana:", mediana_tabela3, "\n")
# Tabela 1
tabela1 <- data.frame(
Xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
# Tabela 2
tabela2 <- data.frame(
Xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# Tabela 3
tabela3 <- data.frame(
Xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Tabela 1
media_tabela1 <- weighted.mean(tabela1$Xi, tabela1$fi)
# Tabela 2
media_tabela2 <- weighted.mean(tabela2$Xi, tabela2$fi)
# Tabela 3
media_tabela3 <- weighted.mean(tabela3$Xi, tabela3$fi)
calcular_moda <- function(tabela) {
moda <- tabela$Xi[which.max(tabela$fi)]
return(moda)
}
# Tabela 1
moda_tabela1 <- calcular_moda(tabela1)
# Tabela 2
moda_tabela2 <- calcular_moda(tabela2)
# Tabela 3
moda_tabela3 <- calcular_moda(tabela3)
calcular_mediana <- function(tabela) {
valores_expandidos <- rep(tabela$Xi, tabela$fi)
mediana <- median(valores_expandidos)
return(mediana)
}
# Tabela 1
mediana_tabela1 <- calcular_mediana(tabela1)
# Tabela 2
mediana_tabela2 <- calcular_mediana(tabela2)
# Tabela 3
mediana_tabela3 <- calcular_mediana(tabela3)
cat("Resultados Tabela 1:\n")
cat("Média:", media_tabela1, "\n")
cat("Moda:", moda_tabela1, "\n")
cat("Mediana:", mediana_tabela1, "\n\n")
cat("Resultados Tabela 2:\n")
cat("Média:", media_tabela2, "\n")
cat("Moda:", moda_tabela2, "\n")
cat("Mediana:", mediana_tabela2, "\n\n")
cat("Resultados Tabela 3:\n")
cat("Média:", media_tabela3, "\n")
cat("Moda:", moda_tabela3, "\n")
cat("Mediana:", mediana_tabela3, "\n")
#limpeza
rm(list=ls())
#Biblioteca
library(readr)   # Para CSV
library(readxl)  # Para XLSX
library(dplyr)   # Manipulação de dados
library(ggplot2) # Visualização de dados
library(writexl) # Exportação para Excel
version
install.packages(c("askpass", "backports", "bit", "bit64", "brew", "broom", "bslib", "cachem", "callr", "cli", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "evaluate", "fansi", "farver", "fastmap", "fontawesome", "fs", "ggplot2", "glue", "gtable", "haven", "highr", "htmltools", "jsonlite", "knitr", "lintr", "lubridate", "munsell", "openssl", "pillar", "pkgbuild", "pkgload", "processx", "progress", "ps", "purrr", "R.oo", "R.utils", "R6", "ragg", "readr", "readxl", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rvest", "sass", "scales", "stringi", "styler", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
#Biblioteca
library(readr)   # Para CSV
library(readxl)  # Para XLSX
library(dplyr)   # Manipulação de dados
library(ggplot2) # Visualização de dados
#Biblioteca
library(readr)   # Para CSV
library(readxl)  # Para XLSX
library(dplyr)   # Manipulação de dados
library(ggplot2) # Visualização de dados
library(writexl) # Exportação para Excel
#Ler arquivo
PATH<-"C:/Users/User/Documents/Projeto Integrador/Aula 3/Atividade"
setwd(PATH)
# Definir caminhos dos arquivos (ajuste conforme necessário)
caminho_csv <- "populacao_canada.csv"
caminho_xlsx <- "populacao_canada.xlsx"
# Importar arquivo CSV
dados <- read_csv(caminho_csv)
dados
install.packages("writexl", type = "source")
